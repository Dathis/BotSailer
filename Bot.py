import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ContentType
from add_states import Add_States, Delete_States, Update_States, Help, Hello, Alert
from config import token
import keyboards as kb
import sqlite3
from block_io import BlockIo
import re

storage = MemoryStorage()

bot = Bot(token=token)
dp = Dispatcher(bot, storage=storage)

admins = [1143092873,646932957,995797110,5325678388]


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    params = (message.from_user.id,message.from_user.username,message.from_user.first_name,0,message.chat.id)
    cursor.execute(f'SELECT greeting from admin_usage')
    greeting = cursor.fetchone()
    greetings = str(greeting).replace("('", '').replace("',)", '')
    try:
        cursor.execute('''INSERT INTO users VALUES(?,?,?,?,Null,?)''', params)
        connection.commit()
        cursor.close()
    except:
        cursor.close()
    if message.from_user.id in admins:
        await message.reply(f"{greetings}",reply_markup=kb.admin_menu)
    else:
        await message.reply(f"{greetings}",reply_markup=kb.menu)

    print(message.from_user.first_name, message.from_user.id)


@dp.callback_query_handler(lambda query: query.data == 'menu', state='*')
async def done(query: types.CallbackQuery,state:FSMContext):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT greeting from admin_usage')
    greeting = cursor.fetchone()
    greetings = str(greeting).replace("('", '').replace("',)", '')
    if query.from_user.id in admins:
        await query.message.answer(f"{greetings}",reply_markup=kb.admin_menu)
    else:
        await query.message.answer(f"{greetings}",reply_markup=kb.menu)

@dp.message_handler(text="üßë‚Äçüíª–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def bot_message(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à–µ –º–µ–Ω—é –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=kb.admin_panel)

@dp.message_handler(text="üî∏–û—Ç–æ—Å–ª–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def bot_message(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    await Alert.alert.set()

@dp.message_handler(state=Alert.alert)
async def bot_message(message: types.Message, state: FSMContext):
    alert = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT chat_id from users')
    chat_id = cursor.fetchall()
    print(chat_id)
    for i in chat_id:
        i = list(i)
        await bot.send_message(i[0],f'{alert}')

@dp.message_handler(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def bot_message(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ,–≤—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\nO—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞')
    await Add_States.name.set()


@dp.message_handler(state=Add_States.name)
async def get_name(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    async with state.proxy() as data:
        data['name'] = message.text
    await Add_States.description.set()


@dp.message_handler(state=Add_States.description)
async def get_description(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ü–µ–Ω—É')
    async with state.proxy() as data:
        data['description'] = message.text
    await Add_States.price.set()


@dp.message_handler(state=Add_States.price)
async def get_price(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞',reply_markup=kb.img_skip)
    async with state.proxy() as data:
        data['price'] = message.text
    await Add_States.img.set()


@dp.message_handler(state=Add_States.img, content_types=ContentType.PHOTO)
async def get_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    async with state.proxy() as data:
        data['img'] = file_id
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä.')
    await Add_States.adres.set()

@dp.callback_query_handler(lambda query: query.data == 'img_skip', state=Add_States.img)
async  def get_location(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä."')
    await Add_States.adres.set()

@dp.message_handler(state=Add_States.adres)
async def get_location1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await bot.send_message(message.from_user.id,'–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å—Å –Ω–∞–ø—Ä–∏–º–µ—Ä:–£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞,4')
    await Add_States.url.set()

@dp.message_handler(state=Add_States.url)
async def get_url(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adres'] = message.text
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    await Add_States.finish.set()

@dp.message_handler(state=Add_States.finish)
async def get_location1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
    await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',reply_markup=kb.done)

@dp.callback_query_handler(lambda query: query.data == 'done', state='*')
async def done(query: types.CallbackQuery,state:FSMContext):
    await query.message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,{query.from_user.first_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª",
                                reply_markup=kb.admin_menu)
    async with state.proxy() as data:
        name = data.get('name')
        img = data.get('img')
        description = data.get('description')
        price = data.get('price')
        city = data.get('city')
        adres = data.get('adres')
        url = data.get('url')
        params = (name, img, description, price, city, adres, url,0)
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        cursor.execute('''INSERT INTO products VALUES(Null,?,?,?,?,?,?,?,?)''', params)
        connection.commit()
        cursor.close()
    await state.finish()

@dp.message_handler(text="‚ûñ–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM products where booking = 0')
    exists = cursor.fetchall()
    for i in exists:
        await bot.send_message(message.chat.id, f'{i[0]}. {i[1]}-üí∏{i[4]} —Ä—É–±.\n{i[3]}\n–ì–æ—Ä–æ–¥:{i[5]}\n–ê–¥—Ä–µ—Å:{i[6]}')
    cursor.close()
    await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await Delete_States.delete.set()

@dp.message_handler(state=Delete_States.delete)
async def delete_product(message: types.Message, state: FSMContext):
    id = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    try:
        cursor.execute(f"""DELETE from products where id_product = {int(id)}""")
        connection.commit()
        await bot.send_message(message.chat.id,'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        cursor.close()
    except:
        await bot.send_message(message.chat.id,'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
    await state.finish()

@dp.message_handler(text="üÜô–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM products where booking = 0')
    exists = cursor.fetchall()
    for i in exists:
        await bot.send_message(message.chat.id, f'{i[0]}. {i[1]}-üí∏{i[4]} —Ä—É–±.\n{i[3]}\n–ì–æ—Ä–æ–¥:{i[5]}\n–ê–¥—Ä–µ—Å:{i[6]}')
    cursor.close()
    await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
    await Update_States.update.set()

@dp.message_handler(state=Update_States.update)
async def update_product(message: types.Message, state: FSMContext):
    id = message.text
    async with state.proxy() as data:
        data['id'] = id
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    try:
        cursor.execute(f"""SELECT * from products where id_product = {int(id)}""")
        products = cursor.fetchone()
        p = list(products)
        await bot.send_message(message.chat.id,f'id:{p[0]}\n–ò–º—è:{p[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{p[3]}\n–¶–µ–Ω–∞:{p[4]} ‚ÇΩ\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}')
        await bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        await Update_States.choose.set()
    except:
        await bot.send_message(message.chat.id,'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        await state.finish()

@dp.message_handler(state=Update_States.choose)
async def update_product(message: types.Message, state: FSMContext):
    choose = message.text.title()
    if choose == 'Id':
        await bot.send_message(message.chat.id,'–ò–∑–≤–∏–Ω–∏—Ç–µ,–Ω–æ id –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è –≤ —Ü–µ–ª—è—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª')
        await Update_States.choose.set()
    elif choose == '–ò–º—è':
        await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
        await Update_States.name.set()
    elif choose == '–û–ø–∏—Å–∞–Ω–∏–µ':
        await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        await Update_States.description.set()
    elif choose == '–¶–µ–Ω–∞':
        await bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
        await Update_States.price.set()
    elif choose == '–ì–æ—Ä–æ–¥':
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ì–æ—Ä–æ–¥')
        await Update_States.city.set()
    elif choose == '–ê–¥—Ä–µ—Å':
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å')
        await Update_States.adress.set()

    else:
        await bot.send_message(message.chat.id,'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(state=Update_States.name)
async def update_product(message: types.Message, state: FSMContext):
    name = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    async with state.proxy() as data:
        args = (name, data['id'])
        cursor.execute('Update products set name = ? where id_product = ?',args)
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–ò–º—è —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ')
    await state.finish()

@dp.message_handler(state=Update_States.description)
async def update_product(message: types.Message, state: FSMContext):
    description = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    async with state.proxy() as data:
        args = (description, data['id'])
        cursor.execute('Update products set description = ? where id_product = ?', args)
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ')
    await state.finish()


@dp.message_handler(state=Update_States.price)
async def update_product(message: types.Message, state: FSMContext):
    price = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    async with state.proxy() as data:
        args = (price, data['id'])
        cursor.execute('Update products set price = ? where id_product = ?', args)
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞')
    await state.finish()

@dp.message_handler(state=Update_States.adress)
async def update_product(message: types.Message, state: FSMContext):
    adress = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    async with state.proxy() as data:
        args = (adress, data['id'])
        cursor.execute('Update products set adres = ? where id_product = ?', args)
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
    await state.finish()

@dp.message_handler(state=Update_States.city)
async def update_product(message: types.Message, state: FSMContext):
    city = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    async with state.proxy() as data:
        args = (city, data['id'])
        cursor.execute('Update products set city = ? where id_product = ?', args)
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
    await state.finish()


@dp.message_handler(text="üè†–ú–µ–Ω—é")
async def bot_message(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT greeting from admin_usage')
    greeting = cursor.fetchone()
    greetings = str(greeting).replace("('", '').replace("',)", '')
    if message.from_user.id in admins:
        await message.reply(f"{greetings}",reply_markup=kb.admin_menu)
    else:
        await message.reply(f"{greetings}",reply_markup=kb.menu)

@dp.message_handler(text="üì¶–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
async def bot_message(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM products where booking = 0 ")
    products = cursor.fetchall()
    for product in products:
        p = list(product)
        try:
            await bot.send_photo(message.chat.id,photo=p[2],caption=f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}',reply_markup=kb.product_kb)
        except:
            await bot.send_message(message.chat.id,f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}',reply_markup=kb.product_kb)
    cursor.close()


@dp.callback_query_handler(lambda query: query.data == 'buy', state='*')
async def done(query: types.CallbackQuery,state:FSMContext):
    try:
        message = query.message.caption
        print(message)
        name = message.split('üí∏')
        print(name)
        name = name[0]
        id = re.findall(r'\d+', message)
        id = [int(i) for i in id]
        id = id[-1]
        async with state.proxy() as data:
            data['name'] = name
            data['id'] = id

        nums = re.findall(r'\d+', message)
        nums = [int(i) for i in nums]
        await query.message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞\n –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω–∏–º—É—Ç: {nums[0]} ‚ÇΩ',reply_markup=kb.buy_proofs)

    except:
        message = query.message.text
        name = message.split('üí∏')
        print(name)
        name = name[0]
        id = re.findall(r'\d+', message)
        id = [int(i) for i in id]
        id = id[-1]
        async with state.proxy() as data:
            data['name'] = name
            data['id'] = id

        nums = re.findall(r'\d+', message)
        nums = [int(i) for i in nums]
        await query.message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞\n –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω–∏–º—É—Ç: {nums[0]} ‚ÇΩ',reply_markup=kb.buy_proofs)


@dp.callback_query_handler(lambda query: query.data == 'aprove', state='*')
async def done(query: types.CallbackQuery,state:FSMContext):
    #Price on product
    message = query.message.text
    print(message)
    nums = re.findall(r'\d+', message)
    price = [int(i) for i in nums]
    price = price[0]
    user_id = query.from_user.id
    #BD
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f"SELECT balance FROM users where id_user ={user_id}")
    b = cursor.fetchone()
    balance = str(b).replace("(", '').replace(",)", '')
    balance = float(balance)
    connection = sqlite3.connect('db/database.db')
    booking = connection.cursor()
    booking.execute("SELECT booking from products where id_product = 10")
    booking_check = booking.fetchone()
    booking_check = list(booking_check)
    booking_check = booking_check[0]
    if price > balance:
        await bot.send_message(query.message.chat.id, f'‚õî–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ {price} ‚ÇΩ\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å',reply_markup=kb.payment_kb)
    elif booking_check != 0:
        await bot.send_message(query.message.chat.id,'‚õî–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä —É–∂–µ –∫—É–ø–∏–ª–∏.')
    else:
        async with state.proxy() as data:
            id = data.get('id')
            cursor.execute(f"SELECT url FROM products where id_product ={id}",)
            url = cursor.fetchone()
            url = str(url).replace("('",'').replace("',)",'')
            balance = balance - price
            args = (balance, user_id)
            cursor.execute('''Update users set balance = ? where id_user = ?''', args)
            cursor.execute(f"Update products set booking = {user_id} where id_product={id}")
            connection.commit()
            cursor.close()
        await bot.send_message(query.message.chat.id,f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä.\n–° —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –∏ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n{url}',disable_web_page_preview=True)

@dp.callback_query_handler(lambda query: query.data == 'cancel', state='*')
async def cancel(query: types.CallbackQuery,state:FSMContext):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM products where booking = 0")
    products = cursor.fetchall()
    for product in products:
        p = list(product)
        try:
            await bot.send_photo(query.message.chat.id,photo=p[2],caption=f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}',reply_markup=kb.product_kb)
        except:
            await bot.send_message(query.message.chat.id,f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}',reply_markup=kb.product_kb)
    cursor.close()


@dp.message_handler(text="üó∫–ì–æ—Ä–æ–¥–∞")
async def bot_message(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT city FROM products where booking =0")
    cities = cursor.fetchall()
    await bot.send_message(message.from_user.id, '–°–Ω–∏–∑—É —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ—Ä–æ–¥', reply_markup=kb.genmarkup(cities))

@dp.callback_query_handler(lambda query: query.data.startswith("city"), state='*')
async def cities(query: types.CallbackQuery, state: FSMContext):
    city = query.data.split('_')
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f"SELECT * from products where city ='{city[1]}' and booking = 0")
    products = list(cursor.fetchall())
    for product in products:
        p = list(product)
        try:
            await bot.send_photo(query.message.chat.id,photo=p[2],caption=f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}',reply_markup=kb.product_kb)
        except:
            await bot.send_message(query.message.chat.id,f'{p[1]} üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}',reply_markup=kb.product_kb)
    cursor.close()





@dp.message_handler(text="üí∞–ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑")
async def bot_message(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    id = message.from_user.id
    cursor.execute(f"SELECT * from products where booking={id}")
    product = cursor.fetchall()
    for p in product:
        p = list(p)
        try:
            await bot.send_photo(message.chat.id, photo=p[2],
                                     caption=f'{p[1]} -üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}\n{p[7]}')
        except:
            await bot.send_message(message.chat.id,
                                       f'{p[1]} -üí∏{p[4]} ‚ÇΩ\n{p[3]}\n–ì–æ—Ä–æ–¥:{p[5]}\n–ê–¥—Ä–µ—Å:{p[6]}\nid:{p[0]}\n{p[7]}')


@dp.message_handler(text="‚ùî–ü–æ–º–æ—â—å")
async def bot_message(message: types.Message):
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT help from admin_usage')
    help = cursor.fetchone()
    help_message = str(help).replace("('", '').replace("',)", '')
    await bot.send_message(message.from_user.id, f'{help_message}')


@dp.message_handler(text="üí≤–ë–∞–ª–∞–Ω—Å")
async def bot_message(message: types.Message):
    id = message.from_user.id
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f"SELECT balance from users where id_user ={id}")
    balance = cursor.fetchall()
    balance = str(balance)
    balance = balance.replace('[(', '').replace(',)]', '')
    await bot.send_message(message.from_user.id, f'üí∞–í–∞—à –±–∞–ª–∞–Ω—Å:\n{balance} ‚ÇΩ')


@dp.message_handler(text="üí∂–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å")
async def bot_message(message: types.Message):
    await bot.send_message(message.chat.id, 'üí∞–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É', reply_markup=kb.payment_kb)



@dp.callback_query_handler(lambda query: query.data == 'bitcoin', state='*')
async def bitcoin(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    try:
        block_io = BlockIo('ac89-2470-8f58-f42c', 'p26Mj6LEaiFZNSZs')
        wallet_dic = block_io.get_new_address(label=f'{user_id}')
        w = wallet_dic['data']
        wallet = w['address']
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        args = (wallet, user_id)
        cursor.execute('''Update users set wallet = ? where id_user = ?''', args)
        connection.commit()
        await bot.send_message(query.message.chat.id,f'üí∞–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—É–º–º—É –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç:\n{wallet}\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 BTC - {rub} ‚ÇΩ\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:0.00001 BTC',reply_markup=kb.pay_done)
        cursor.close()
    except:
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        cursor.execute(f'''SELECT wallet from users where id_user ={user_id}''')
        exist_wallet = cursor.fetchone()
        block_io = BlockIo('ac89-2470-8f58-f42c', 'p26Mj6LEaiFZNSZs')
        price = block_io.get_current_price(price_base='usd')['data']
        usd = price['prices'][0]['price']
        usd = float(usd)
        rub = usd * 65
        exist_wallet = str(exist_wallet).replace("('",'').replace("',)",'')
        await bot.send_message(query.message.chat.id,f'üí∞–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—É–º–º—É –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç:\n{exist_wallet}\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 BTC - {rub} ‚ÇΩ\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:0.00001 BTC',reply_markup=kb.pay_done)
        cursor.close()


@dp.callback_query_handler(lambda query: query.data == 'payment_done', state='*')
async def payment_done(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    block_io = BlockIo('ac89-2470-8f58-f42c', 'p26Mj6LEaiFZNSZs')
    wallet = block_io.get_address_balance(labels=f'{user_id}')
    b = wallet['data']
    wallet_bal = b['available_balance']
    wallet_bal = float(wallet_bal)
    price = block_io.get_current_price(price_base='usd')['data']
    usd = price['prices'][0]['price']
    usd = float(usd)
    rub = wallet_bal * usd
    rub = rub * 65
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'SELECT balance from users where id_user={user_id}')
    balance = cursor.fetchone()
    b = list(balance)[0]
    b = float(b)
    rub = rub + b
    args = (rub, user_id)
    cursor.execute('''Update users set balance = ? where id_user = ?''', args)
    connection.commit()
    try:
        await bot.send_message(query.message.chat.id,f'‚öú–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ {b} ‚ÇΩ‚öú\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å \n{rub} ‚ÇΩ')
        transaction = block_io.prepare_transaction(amounts=f'{wallet_bal}', from_labels=f'{user_id}',
                                                   to_labels='default')
        time.sleep(0.2)
        create_transaction = block_io.create_and_sign_transaction(transaction)
        block_io.submit_transaction(transaction_data=create_transaction)
    except:
        await bot.send_message(query.message.chat.id,f'‚õî–í—ã –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç, –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ —á–µ–º 0.00001 BTC.\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å \n{rub} ‚ÇΩ')




@dp.message_handler(text="üî∂–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def bot_message(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await Hello.hello.set()

@dp.message_handler(state=Hello.hello)
async def update_product(message: types.Message, state: FSMContext):
    greetings = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'Update admin_usage set greeting = "{greetings}"')
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ')
    await state.finish()

@dp.message_handler(text="üî∂–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â—å")
async def bot_message(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ü–æ–º–æ—â—å')
    await Help.help.set()

@dp.message_handler(state=Help.help)
async def update_product(message: types.Message, state: FSMContext):
    help = message.text
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    cursor.execute(f'Update admin_usage set help = "{help}"')
    connection.commit()
    cursor.close()
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ')
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
